; CLI_CMD: Protocol controlled command dispatcher
; Author: Vladimir Sustek, License: free for anything
; Date: 09. Feb 2022, Platform KCPSM6 (PicoBlaze)
;
; The code uses specific KCPSM6 commands and therefore
; may be unportable
;
; Purpose: Module is intended to read received string
; content (e.g. UART) and upon the input determine the
; action. Module is not calling any peripheral layer
; therefore each action is processed by sending data 
; to output port. Also, reading actions are directly 
; accessing input port.
;
; Be careful when adding a new command to do not write
; any register needed for command parsing/dispatching.
;
; Necessary dependencies: RAM_BUFF.psm
;
; Functions: 

; 1) String functions for comparing input:

; CMD_TCKGET, CMD_DA1STV, CMD_DA0STI, CMD_RFSMOD, CMD_LCDSTB
; + CMD_DUMMY (dummy memory area ocuppied by the function)
;
; 2) Action functions (called upon the input request)
;
; RSP_DA1STV, RSP_DA0STI, RSP_RFSMOD, RSP_TCKGET, RSP_LCDSTB, RSP_ERR
;
; 3) Interface function (only called by upper layer/application)
; 
; CHECK_RECEIVED
;
; 4) Internal operations
;
; COMPARE_CMD, GET_ARG, PRINT_ARG, ASCII2HEX
;
;
; Protocol description:
;-----------------------------------------
; EACH input commands must have length of 15 characters:
; 
; - two characters of the peripheral name e.g. D1 (DAC1)
; - underscore delimiter '_' = 0x5F
; - two characters of the action name e.g. SI (Set Voltage)
; - underscore delimiter '_' = 0x5F
; - eight characters of the argument e.g. 00001111
; - termination of the string by LF (Line Feed) = 0x0A 
;
; Supported commands:
;
; D1_SV_XXXX0123 -> applicable D1_SV_00009999 : D1_SV_00000000
; set DAC1 voltage => 0.067mV * argument (max cca 3000mV)
;
; D0_SI_X0123456 -> applicable D0_SI_01FFFFFF : D0_SI_00000000
; set DAC0 frequency => 3.57Hz * argument (max 120MHz)

; RF_MD_XXXXXXX1 -> applicable RF_MD_00000001 : RF_MD_00000005
;
; LC_SB_XXXX2021 -> applicable RF_MD_000010?? : RF_MD_00002F??
; used to control initialized 16x2 display FDCC1602N-FLYYBW-91LE
; by setting ASCII character "??" into position 10 (1st line 0th 
; char) up to position 20 (second line 15th character)
;
; TC_GT_XXXXXXXX -> no meaningful argument needed, just padding
; get 32-bit tick value which is each 1ms incremented
;
; Response:
; Reponse length is always 10 including terminating LF
;
; 
;
CONSTANT CMD_LNG, 06
CONSTANT ARG_LNG, 08
CONSTANT CMD_OK, 55
CONSTANT CMD_ER, AA

; INPUT

CONSTANT sTickReadPort_31_24, 03
CONSTANT sTickReadPort_23_16, 04
CONSTANT sTickReadPort_15_08, 05
CONSTANT sTickReadPort_07_00, 06

CONSTANT cDDSFreqReadPort_07_00, 07
CONSTANT cDDSFreqReadPort_15_08, 08
CONSTANT cDDSFreqReadPort_23_16, 09
CONSTANT cDDSFreqReadPort_31_24, 0A

CONSTANT cDACCalcVoltReadPort_15_08, 10
CONSTANT cDACCalcVoltReadPort_07_00, 11

CONSTANT cDiv10ReadPort_15_08, 12
CONSTANT cDiv10ReadPort_07_00, 13
CONSTANT cMlt10ReadPort_15_08, 14
CONSTANT cMlt10ReadPort_07_00, 15

; OUTPUT
CONSTANT cTxUARTDataPort, 01
CONSTANT cDAC1Port_07_00, 03
CONSTANT cDAC1Port_15_08, 04

CONSTANT cDAC0Port_31_24, 08
CONSTANT cDAC0Port_23_16, 07
CONSTANT cDAC0Port_15_08, 06
CONSTANT cDAC0Port_07_00, 05

CONSTANT cRFModePort, 09
CONSTANT cSystemResetPort, 0A

CONSTANT cLCDPort_1_00, 10
CONSTANT cLCDPort_1_01, 11
CONSTANT cLCDPort_1_02, 12
CONSTANT cLCDPort_1_03, 13
CONSTANT cLCDPort_1_04, 14
CONSTANT cLCDPort_1_05, 15
CONSTANT cLCDPort_1_06, 16
CONSTANT cLCDPort_1_07, 17
CONSTANT cLCDPort_1_08, 18
CONSTANT cLCDPort_1_09, 19
CONSTANT cLCDPort_1_10, 1A
CONSTANT cLCDPort_1_11, 1B
CONSTANT cLCDPort_1_12, 1C
CONSTANT cLCDPort_1_13, 1D
CONSTANT cLCDPort_1_14, 1E
CONSTANT cLCDPort_1_15, 1F

CONSTANT cLCDPort_2_00, 20
CONSTANT cLCDPort_2_01, 21
CONSTANT cLCDPort_2_02, 22
CONSTANT cLCDPort_2_03, 23
CONSTANT cLCDPort_2_04, 24
CONSTANT cLCDPort_2_05, 25
CONSTANT cLCDPort_2_06, 26
CONSTANT cLCDPort_2_07, 27
CONSTANT cLCDPort_2_08, 28
CONSTANT cLCDPort_2_09, 29
CONSTANT cLCDPort_2_10, 2A
CONSTANT cLCDPort_2_11, 2B
CONSTANT cLCDPort_2_12, 2C
CONSTANT cLCDPort_2_13, 2D
CONSTANT cLCDPort_2_14, 2E
CONSTANT cLCDPort_2_15, 2F

CONSTANT cDDSFreqWritePort_07_00, 30
CONSTANT cDDSFreqWritePort_15_08, 31
CONSTANT cDDSFreqWritePort_23_16, 32
CONSTANT cDDSFreqWritePort_31_24, 33

CONSTANT cDiv10WritePort_15_08, 34
CONSTANT cDiv10WritePort_07_00, 35
CONSTANT cMlt10WritePort_15_08, 36
CONSTANT cMlt10WritePort_07_00, 37

CONSTANT cUNKNOWN_COMAND, AA
CONSTANT cCORRECT_COMMAND, 55

CONSTANT cNoRFMod, 00
CONSTANT cRFTestSine, 01
CONSTANT cRFTestSinePilot, 02
CONSTANT cRFMono, 03
CONSTANT cRFMonoPilot, 04
CONSTANT cRFMonoStereo, 05
CONSTANT cRFMonoStereoPilot, 06
;-----------------------------------------
; EACH commands needs always content of 15 characters:
; 
; - two characters of the peripheral name e.g. D1 (DAC1)
; - underscore delimiter '_' = 0x5F
; - two characters of the action name e.g. SI (Set Voltage)
; - underscore delimiter '_' = 0x5F
; - eight characters of the argument e.g. 00001111
; - termination of the string by LF (Line Feed) = 0x0A 
;
; - system always replies with response of length 10
;
; D1_SV_XXXX0123<LF> -> applicable D1_SV_00009999 : D1_SV_00000000
; set DAC1 voltage => 0.067mV * argument (max cca 3000mV)

; Awaited response: DA1:V-set<LF>
;
; D0_SI_X0123456<LF> -> applicable D0_SI_01FFFFFF : D0_SI_00000000
; set DAC0 frequency => 3.57Hz * argument (max 120MHz)

; Awaited response: DA0:I-set<LF>
;
; RF_MD_XXXXXXX1 -> applicable RF_MD_00000000 : AU_SR_00000006
;
; 0 - No DAC0 signal and amplifier stage turned off
; 1 - cRFTestSine
; 2 - cRFTestSinePilot
; 3 - cRFMono
; 4 - cRFMonoPilot
; 5 - cRFMonoStereo
; 6 - cRFMonoStereoPilot
;
; Awaited response: RFS:M-set<LF>
;
; TC_GT_XXXXXXXX -> no meaningful argument needed, just padding
; get 32-bit tick value which is each 1ms incremented
;
; Awaited response: STCK:AABBCCDD<LF> 
; !!! note that response payload has length of 4-bytes - hex, not 8-bytes !!!
;
; LC_SB_XXXX2020 -> applicable RF_MD_0000XXYY : AU_SR_0000XXYY where YY is ASCII
; 
; XX stands for position: LINE(1 or 2) and CHARACTER (0-F) and YY FOR ASCII character
;
; Awaited response LC_DB:XXYYY<LF>
; 
; 
; Fuctions headers to be checked against received content
; s6 is only needed when the function is called.
STRING STCK_GET$, "TC_GT_"
CMD_TCKGET: LOAD&RETURN s6, STCK_GET$

STRING SDA1_STV$, "D1_SV_"
CMD_DA1STV: LOAD&RETURN s6, SDA1_STV$
	  
STRING SDA0_STI$, "D0_SI_"
CMD_DA0STI: LOAD&RETURN s6, SDA0_STI$

STRING SRFS_MOD$, "RF_MD_"
CMD_RFSMOD: LOAD&RETURN s6, SRFS_MOD$

STRING SLCD_STB$, "LC_SB_"
CMD_LCDSTB: LOAD&RETURN s6, SLCD_STB$

STRING SSYS_RST$, "SR_ST_"
CMD_SYSRST: LOAD&RETURN s6, SSYS_RST$

; This function is not intended to be called
; neither anyhow used, but by placing this 
; function here I eliminated weird behaviour
; for calling function CMD_RFSMOD, my theory
; is that there was some conflict with address
; of the last function and other used memspace
; therefore this padding by the CMD_DUMMY makes
; a border between functions and the rest
STRING SDUMMY$, "DUMMY_"
CMD_DUMMY: LOAD&RETURN s6, SDUMMY$

;------------------------------------------
; Supported functions and their HW actions
;------------------------------------------


; Function sets DA1 voltage by shifting out
; the 16-bit value in two 8-bit chunks
; Therefore, buffering at the output is expected
; Function finishes with UART message and setting
; characters on the display within cLCDPort_2_09 - cLCDPort_2_15
; FUNCTION CONTAINS SEQUENCE TO CONVERT HEX INTO ASCII
STRING SRDA1_STV$, "DA1:V-set"
RSP_DA1STV: CALL UART_TX_CLEAR
						
			CALL READ_ARG_15_08
			OUTPUT BUFF_DATA, cDAC1Port_15_08
			CALL READ_ARG_07_00
			OUTPUT BUFF_DATA, cDAC1Port_07_00
			
			INPUT s0, cDACCalcVoltReadPort_15_08
			INPUT s1, cDACCalcVoltReadPort_07_00
			
			LOAD s3, cLCDPort_2_04

; 16-bit HEX2ASCII conversion begin
div10_da1:	LOAD s2, s1
			OUTPUT s0, cDiv10WritePort_15_08 ; send value for FPGA HW div 10
			OUTPUT s1, cDiv10WritePort_07_00
			INPUT s0, cDiv10ReadPort_15_08 ; receive value after FPGA HW div 10
			INPUT s1, cDiv10ReadPort_07_00
			
			OUTPUT s0, cMlt10WritePort_15_08 ; send value for FPGA HW mlt 10
			OUTPUT s1, cMlt10WritePort_07_00
			INPUT s0, cMlt10ReadPort_15_08; receive value after FPGA HW mlt 10
			INPUT s1, cMlt10ReadPort_07_00
					
			SUB s2, s1 ; get last decadic digit
			ADD s2, 30 ; make the digit an ASCII character
			OUTPUT s2, (s3) ; send the character to the LCD
			SUB s3, 01 ; increment LCD character position
			
			OR s1, 00 ; get converted number into STATUS context
			JUMP Z, da1_end ; if the number is 0, leave - finished conversion
			
			OUTPUT s0, cDiv10WritePort_15_08 ; send value for FPGA HW div 10
			OUTPUT s1, cDiv10WritePort_07_00
			INPUT s0, cDiv10ReadPort_15_08 ; receive value after FPGA HW div 10
			INPUT s1, cDiv10ReadPort_07_00
			JUMP div10_da1
			
da1_end:    LOAD s2, "m"
			OUTPUT s2, cLCDPort_2_05
			LOAD s2, "V"
			OUTPUT s2, cLCDPort_2_06
			
			OUTPUTK SRDA1_STV$, 1
		    OUTPUTK LF, 1	
			
da1_crlcd:  COMPARE s3, cLCDPort_2_00 ; padd unused characters with SPACE (when the new number is smaller)
			RETURN Z ; if there is no character to clean (5-digit width), simply return
			COMPARE s3, 1F ; detect if if s3 was unterflowed due to full digit usage 
			RETURN Z
			LOAD s2, " "
			OUTPUT s2, (s3)
			SUB s3, 01
			JUMP da1_crlcd
			
			RETURN
			
; Function sets DA0 phase increment by shifting out
; the 32-bit value in four 8-bit chunks
; Therefore, buffering at the output is expected
; Function finishes with UART message and setting
; characters on the display within cLCDPort_1_07 - cLCDPort_1_15
; FUNCTION CONTAINS SEQUENCE TO CONVERT HEX INTO ASCII
STRING SRDA0_SET$, "DA0:I-set"
RSP_DA0STI: CALL UART_TX_CLEAR

			CALL READ_ARG_31_24
			OUTPUT BUFF_DATA, cDAC0Port_31_24
			OUTPUT BUFF_DATA, cDDSFreqWritePort_31_24
			CALL READ_ARG_23_16
			OUTPUT BUFF_DATA, cDAC0Port_23_16
			OUTPUT BUFF_DATA, cDDSFreqWritePort_23_16
			CALL READ_ARG_15_08
			OUTPUT BUFF_DATA, cDAC0Port_15_08
			OUTPUT BUFF_DATA, cDDSFreqWritePort_15_08
			CALL READ_ARG_07_00
			OUTPUT BUFF_DATA, cDAC0Port_07_00
			OUTPUT BUFF_DATA, cDDSFreqWritePort_07_00
			
			INPUT s0, cDDSFreqReadPort_15_08 ; READ Phase Inc multiplied 3.5763 and 1.000404358e-3	
			INPUT s1, cDDSFreqReadPort_07_00
			
			LOAD s3, cLCDPort_1_04
; 16-bit HEX2ASCII conversion begin		
div10_da0:	LOAD s2, s1
			OUTPUT s0, cDiv10WritePort_15_08 ; send value for FPGA HW div 10
			OUTPUT s1, cDiv10WritePort_07_00
			INPUT s0, cDiv10ReadPort_15_08 ; receive value after FPGA HW div 10
			INPUT s1, cDiv10ReadPort_07_00
			
			OUTPUT s0, cMlt10WritePort_15_08 ; send value for FPGA HW mlt 10
			OUTPUT s1, cMlt10WritePort_07_00
			INPUT s0, cMlt10ReadPort_15_08; receive value after FPGA HW mlt 10
			INPUT s1, cMlt10ReadPort_07_00
					
			SUB s2, s1 ; get last decadic digit
			ADD s2, 30 ; make the digit an ASCII character
			OUTPUT s2, (s3) ; send the character to the LCD
			SUB s3, 01 ; increment LCD character position
			
			OR s1, 00 ; get converted number into STATUS context
			JUMP Z, da0_end ; if the number is 0, leave - finished conversion
			
			OUTPUT s0, cDiv10WritePort_15_08 ; send value for FPGA HW div 10
			OUTPUT s1, cDiv10WritePort_07_00
			INPUT s0, cDiv10ReadPort_15_08 ; receive value after FPGA HW div 10
			INPUT s1, cDiv10ReadPort_07_00
			JUMP div10_da0
			
da0_end:    LOAD s2, "k"
			OUTPUT s2, cLCDPort_1_05
			LOAD s2, "H"
			OUTPUT s2, cLCDPort_1_06
			LOAD s2, "z"
			OUTPUT s2, cLCDPort_1_07
			
			OUTPUTK SRDA0_SET$, 1
			OUTPUTK LF, 1

da0_crlcd:  COMPARE s3, cLCDPort_1_00 ; clearing unused characters (when the new number is smaller)
			RETURN Z  ; if there is no character to clean (5-digit width), simply return
			COMPARE s3, 0F ; detect if if s3 was unterflowed due to full digit usage 
			RETURN Z
			LOAD s2, " "
			OUTPUT s2, (s3)
			SUB s3, 01
			JUMP da0_crlcd

			RETURN

; Function sets RF Mode by setting 8-bit value
; Value may be immediately used - no chunks
; Function finished with UART message
STRING SRRFS_MOD$, "RFS:M-set"
RSP_RFSMOD: CALL UART_TX_CLEAR

			CALL READ_ARG_07_00
			
			COMPARE BUFF_DATA, cNoRFMod
			CALL Z, LCD_NOMOD

			COMPARE BUFF_DATA, cRFTestSine
			CALL Z, LCD_TMONO

			COMPARE BUFF_DATA, cRFTestSinePilot
			CALL Z, LCD_TMONP
			
			COMPARE BUFF_DATA, cRFMono
			CALL Z, LCD_MONO

			COMPARE BUFF_DATA, cRFMonoPilot
			CALL Z, LCD_MONOP

			COMPARE BUFF_DATA, cRFMonoStereo
			CALL Z, LCD_MONST

			COMPARE BUFF_DATA, cRFMonoStereoPilot
			CALL Z, LCD_MOSTP
			
			OUTPUT BUFF_DATA, cRFModePort
			
			OUTPUTK SRRFS_MOD$, 1
		    OUTPUTK LF, 1
			
			RETURN

; Function reads milisecond counter and directly
; sends out the value as a part of the UART message
STRING SRTCK_GET$, "STCK:"
RSP_TCKGET: CALL UART_TX_CLEAR

			OUTPUTK SRTCK_GET$, 1

			INPUT BUFF_DATA, sTickReadPort_31_24
			OUTPUT BUFF_DATA, cTxUARTDataPort
			INPUT BUFF_DATA, sTickReadPort_23_16
			OUTPUT BUFF_DATA, cTxUARTDataPort
			INPUT BUFF_DATA, sTickReadPort_15_08
			OUTPUT BUFF_DATA, cTxUARTDataPort
			INPUT BUFF_DATA, sTickReadPort_07_00
			OUTPUT BUFF_DATA, cTxUARTDataPort

			OUTPUTK LF, 1
			
			RETURN


; Function gets argument byte 15_08 as an display address
; and 07_00 as an ASCII character and sends the character
; into the appropriate port.
STRING SRLCD_STB$, "LCDB:"		
RSP_LCDSTB: CALL UART_TX_CLEAR
			OUTPUTK SRLCD_STB$, 1
		
			CALL READ_ARG_15_08
			LOAD s6, BUFF_DATA
			OUTPUT s6, TX_UART_PORT
			
			CALL READ_ARG_07_00
			OUTPUT BUFF_DATA, (s6)
			OUTPUT BUFF_DATA, TX_UART_PORT

			OUTPUTK LF, 1
			
			RETURN


; Function sets up bit to reset and eventually returns
STRING SRSYS_RST$, "SYS_RESET"	
RSP_SYSRST: CALL UART_TX_CLEAR
			OUTPUTK SRSYS_RST$, 1
			OUTPUTK LF, 1
			CALL DELAY_100MS
			LOAD s5, FF
            OUTPUT s5, cSystemResetPort
			
			RETURN
			
; Function sends out UART message signalizing error
STRING SINPERR$,   "INPUTERR!"
RSP_GENERR:     	CALL UART_TX_CLEAR
					OUTPUTK SINPERR$, 1
					OUTPUTK LF, 1
					RETURN	
;--------------------------------------------------
;--------------------------------------------------

; Main function to be called by upper layer
;
; Algorithm gradually loads addresses of the
; functions into registers:
;           s3 + s2 - string returning
;           s1 + s0 - action fuction
;
; because s3 - s0 is used by the COMPARE_CMD
; and in case received string matches CMD string the
; action represented as the RSP is called
;
; always, the BUFF_HEAD is saved, because buffer
; is loaded and controlled for each command
; 
; function sets in the beginning the cUNKNOWN_COMAND
; constant, which is affected in the COMPARE_CMD
; in case the input string was awaited and invoked
; 
; If there is used another function added. The new one
; must prevent of usage s8 and s7 registers. As the
; s8 keeps the overal return value with initialized state
; and s7 keeps length of the BUFF_HEAD, value needed to
; be kept for correct reading of the RAM BUFFER.

CHECK_RECEIVED:	LOAD s8, cUNKNOWN_COMAND
				LOAD s7, BUFF_HEAD

				LOAD s3, CMD_TCKGET'upper
				LOAD s2, CMD_TCKGET'lower
				LOAD s1, RSP_TCKGET'upper
				LOAD s0, RSP_TCKGET'lower
				CALL COMPARE_CMD
				
				LOAD BUFF_HEAD, s7

				LOAD s3, CMD_DA1STV'upper
				LOAD s2, CMD_DA1STV'lower
				LOAD s1, RSP_DA1STV'upper
				LOAD s0, RSP_DA1STV'lower	
				CALL COMPARE_CMD
				
				LOAD BUFF_HEAD, s7
				
				LOAD s3, CMD_DA0STI'upper
				LOAD s2, CMD_DA0STI'lower
				LOAD s1, RSP_DA0STI'upper
				LOAD s0, RSP_DA0STI'lower
				CALL COMPARE_CMD
				
				LOAD BUFF_HEAD, s7
				
				LOAD s3, CMD_RFSMOD'upper
				LOAD s2, CMD_RFSMOD'lower
				LOAD s1, RSP_RFSMOD'upper
				LOAD s0, RSP_RFSMOD'lower
				CALL COMPARE_CMD

				LOAD BUFF_HEAD, s7
				
				LOAD s3, CMD_LCDSTB'upper
				LOAD s2, CMD_LCDSTB'lower
				LOAD s1, RSP_LCDSTB'upper
				LOAD s0, RSP_LCDSTB'lower
				CALL COMPARE_CMD
				
				LOAD BUFF_HEAD, s7
				
				LOAD s3, CMD_SYSRST'upper
				LOAD s2, CMD_SYSRST'lower
				LOAD s1, RSP_SYSRST'upper
				LOAD s0, RSP_SYSRST'lower
				CALL COMPARE_CMD	
				
				COMPARE s8, cCORRECT_COMMAND
				CALL NZ, RSP_GENERR
				COMPARE s8, cCORRECT_COMMAND
				CALL Z, SYS_MESSAGE_ACK
				
				CALL INIT_BUFF
				RETURN				
			
;--------------------------------------------------

; The most important function which goes in cycle/loop through received string
; and compares the characters with known string. In case of unknown command
; the function immediately returns. In case of correct command, but incorrect
; argument length, function also invokes no action. In case of correct command
; and correct argument length, an appropriate action is invoked and cCORRECT_COMMAND set.
;
; Function is designed to be called several times with several addresses in s0-s4 preloaded.
;
; Registers s3, s2 have the address of the certain "GET string for compare the input string" 
; function loaded and s1, s0 has address of the final certain function to be called loaded.
;
; Register s4 is used as a counter when is being iterated during comparing the strings.
;
; ALL REGISTERS ARE NOT LONGER NEEDED TO HAVE PRESERVED CONTENT, so when the final function
; (loaded in s0-s1) is called, inside of its body may be s0-s4 freely used/erased/overriden.
;

COMPARE_CMD:  LOAD s4, CMD_LNG ; length of string for the counter = number of the loop's cycles
cycle:		  CALL@ (s3, s2) ; call the routine which returns checked string, pointing on 1st char
			  OR s4, 00 ; redudant OR to return Z in context of the s4 (loop's counter)
			  JUMP Z, endofstr ; so, if end of loop (counter = 0), jump to check last character
			  CALL READ_BUFF; otherwise, read (fetch) received character (UART)
			  COMPARE s6, BUFF_DATA ; check receveived against string (character) retreived upper
			  RETURN NZ ; if character does not fit, leave - without any notice
			  SUB s4, 01 ; bute if if yes, decrement loop's counter
			  ADD s2, 01 ; increment routines address to get/test another char
			  JUMP cycle ; repeat the loop - to check another received character
			  
endofstr:	  LOAD s4, BUFF_TAIL; get buff tail (index of the string's begin)
			  SUB s4, BUFF_HEAD; get buff head (index of the string's end)
			  SUB s4, 01; decrement to exluced LF termination
			  COMPARE s4, ARG_LNG ; is length as the expected argument lentgh?
			  JUMP Z, match ; 1 or 0 returned in s0
			  LOAD s4, 00
			  RETURN; else return
			  		  
match:		  CALL GET_ARG; retrieve argument
			  CALL@ (s1, s0); call the final function doing the action
			  LOAD s8, cCORRECT_COMMAND
			  RETURN
			  
;--------------------------------------------------

; Function to go through the 8-characters string argument
; and further convert it into the 32-bit (4-byte) number 
; Finally, all is stored in the RAM (ADRARG_31_24 - ADRARG_07_00)
;
; The function stores its return into RAM so s4 and s5 may be freely
; used outside of the function.
GET_ARG:	  LOAD s4, ADRARG_31_24
iter32b:	  CALL READ_BUFF
			  CALL ASCII2HEX
			  LOAD s5, BUFF_DATA
			  SL0 s5
			  SL0 s5
			  SL0 s5
			  SL0 s5  
			  CALL READ_BUFF
			  CALL ASCII2HEX
			  ADD s5, BUFF_DATA
			  
			  STORE s5, (s4)	  
			  ADD s4, 01
			  
			  JUMP NC, iter32b
			  RETURN Z

; Function to convert character into hex number	("A" -> 0xA)
; Function convert max 1 hex digit, expected input "0-9", "A-F" or "a-f"
ASCII2HEX:    SUB BUFF_DATA, 30 ; first subtract 48 ("0")
			  COMPARE BUFF_DATA, LF; check whether its a decadic number
			  RETURN C ; return if it is a number 0-9 (BUFF_DATA < LF)
			  SUB BUFF_DATA, 07 ; substract by 7 (7 chars between "9" - "A")
			  COMPARE BUFF_DATA, 10 ; check whether input is A-F (10-15)
			  RETURN C ; return if it is a letter A-F
			  SUB BUFF_DATA, 20 ; ; substract by 32 (32 chars between "F" - "a")
			  RETURN

; Function converts upper BUFF_DATA register nibble which is (always) 
; within 0x0 - 0xF into ASCII "0-9", "A-F" respectively
; Function output s5 is directly capable for LCD_16x2 driving
; Therefore, s5 is the return value and after its usage it may be
; again reused inside of the another function
HEX2ASCII_UPPER: LOAD s5, BUFF_DATA
				 AND s5, F0
				 SR0 s5
				 SR0 s5
				 SR0 s5
				 SR0 s5
				 ADD s5, 30
				 COMPARE s5, 3A
				 RETURN C
				 ADD s5, 07
				 
				 RETURN
; Function converts lower BUFF_DATA register nibble which is (always) 
; within 0x0 - 0xF into ASCII "0-9", "A-F" respectively
; Function output s5 is directly capable for LCD_16x2 driving
; Therefore, s5 is the return value and after its usage it may be
; again reused inside of the another function
HEX2ASCII_LOWER: LOAD s5, BUFF_DATA
				 AND s5, 0F
				 ADD s5, 30
				 COMPARE s5, 3A
				 RETURN C
				 ADD s5, 07
				 RETURN 
			  
; PRINT_ARG:    CALL READ_ARG_31_24
			  ; OUTPUT BUFF_DATA, cTxUARTDataPort
			  ; CALL READ_ARG_23_16
			  ; OUTPUT BUFF_DATA, cTxUARTDataPort
			  ; CALL READ_ARG_15_08
			  ; OUTPUT BUFF_DATA, cTxUARTDataPort
			  ; CALL READ_ARG_07_00
			  ; OUTPUT BUFF_DATA, cTxUARTDataPort
			  ; OUTPUTK LF, 1
			  ; RETURN
			  
LCD_NOMOD: LOAD s0, "N"
	       OUTPUT s0, cLCDPort_2_11
		   LOAD s0, "o"
	       OUTPUT s0, cLCDPort_2_12
		   LOAD s0, "M"
	       OUTPUT s0, cLCDPort_2_13
		   LOAD s0, "o"
	       OUTPUT s0, cLCDPort_2_14
		   LOAD s0, "d"
	       OUTPUT s0, cLCDPort_2_15
		   RETURN
		   
LCD_TMONO: LOAD s0, "T"
	       OUTPUT s0, cLCDPort_2_11
		   LOAD s0, "M"
	       OUTPUT s0, cLCDPort_2_12
		   LOAD s0, "o"
	       OUTPUT s0, cLCDPort_2_13
		   LOAD s0, "n"
	       OUTPUT s0, cLCDPort_2_14
		   LOAD s0, "o"
	       OUTPUT s0, cLCDPort_2_15
		   RETURN

LCD_TMONP:LOAD s0, "T"
	       OUTPUT s0, cLCDPort_2_11
		   LOAD s0, "M"
	       OUTPUT s0, cLCDPort_2_12
		   LOAD s0, "o"
	       OUTPUT s0, cLCDPort_2_13
		   LOAD s0, "n"
	       OUTPUT s0, cLCDPort_2_14
		   LOAD s0, "P"
	       OUTPUT s0, cLCDPort_2_15
		   RETURN
		   
LCD_MONO:  LOAD s0, " "
	       OUTPUT s0, cLCDPort_2_11
		   LOAD s0, "M"
	       OUTPUT s0, cLCDPort_2_12
		   LOAD s0, "o"
	       OUTPUT s0, cLCDPort_2_13
		   LOAD s0, "n"
	       OUTPUT s0, cLCDPort_2_14
		   LOAD s0, "o"
	       OUTPUT s0, cLCDPort_2_15
		   RETURN
		   
LCD_MONOP:  LOAD s0, "M"
	       OUTPUT s0, cLCDPort_2_11
		   LOAD s0, "o"
	       OUTPUT s0, cLCDPort_2_12
		   LOAD s0, "n"
	       OUTPUT s0, cLCDPort_2_13
		   LOAD s0, "o"
	       OUTPUT s0, cLCDPort_2_14
		   LOAD s0, "P"
	       OUTPUT s0, cLCDPort_2_15
		   RETURN
		   
LCD_MONST:  LOAD s0, "M"
	       OUTPUT s0, cLCDPort_2_11
		   LOAD s0, "o"
	       OUTPUT s0, cLCDPort_2_12
		   LOAD s0, "n"
	       OUTPUT s0, cLCDPort_2_13
		   LOAD s0, "S"
	       OUTPUT s0, cLCDPort_2_14
		   LOAD s0, "t"
	       OUTPUT s0, cLCDPort_2_15
		   RETURN
		   
LCD_MOSTP:  LOAD s0, "M"
	       OUTPUT s0, cLCDPort_2_11
		   LOAD s0, "o"
	       OUTPUT s0, cLCDPort_2_12
		   LOAD s0, "S"
	       OUTPUT s0, cLCDPort_2_13
		   LOAD s0, "t"
	       OUTPUT s0, cLCDPort_2_14
		   LOAD s0, "P"
	       OUTPUT s0, cLCDPort_2_15
		   RETURN